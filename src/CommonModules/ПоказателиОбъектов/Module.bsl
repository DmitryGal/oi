#Область ПрограммныйИнтерфейс

Процедура РассчитатьПоказатель(Показатель, КоллекцияОбъектов = Неопределено, Знач ЭтоРегламентноеЗадание = Ложь) Экспорт
	
	ПоказательСтруктура = ?(ТипЗнч(Показатель) = Тип("ПланВидовХарактеристикСсылка.ПоказателиОбъектов"),
		НовыйПоказательСтруктура(Показатель),
		Показатель);
		
	СпособРасчета = ПоказательСтруктура.СпособРасчета;
	
	Если (СпособРасчета = Перечисления.СпособыРасчетаПоказателейОбъектов.ВыполнитьКод) Тогда
		
		РассчитатьПоказательВыполнивКод(ПоказательСтруктура, КоллекцияОбъектов, ЭтоРегламентноеЗадание);
		
	ИначеЕсли (СпособРасчета = Перечисления.СпособыРасчетаПоказателейОбъектов.Запрос) Тогда
		 
		РассчитатьПоказательВыполнивЗапрос(ПоказательСтруктура, КоллекцияОбъектов, ЭтоРегламентноеЗадание);
		
	Иначе
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Показатель %1. Неожиданный способ расчета показателя.'"), Показатель);
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует показатель к отложенному расчету
// 
// Параметры:
// 	Показатель - ПланВидовХарактеристикСсылка.ПоказателиОбъектов - Рассчитываемый показатель.
// 	КоллекцияОбъектов - Массив - Объекты, для которых необходимо рассчитать показатель.
Процедура ЗарегистрироватьОтложенныйРасчетПоказателя(Показатель, КоллекцияОбъектов) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗаблокироватьОчередьОтложенногоРасчета(Показатель, КоллекцияОбъектов); 
	
		ДополнитьОчередьОтложенногоРасчета(Показатель, КоллекцияОбъектов);
	
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось зарегистрировать отложенный расчет показателя ""%1"".'"),
			Показатель);
			
		ЗафиксироватьОшибкуОтложенногоРасчета(ТекстОшибки);
		
		ВызватьИсключение ОписаниеОшибки();
		
	КонецПопытки;
	
	ВключитьРегламетноеЗаданиеОтложенногоРассчета();
	
КонецПроцедуры

Функция НайтиПоказательПоИдентификатору(Идентификатор) Экспорт
	
	Возврат НайтиПоказателиПоИдентификаторам(Идентификатор)[Идентификатор];
	
КонецФункции

Функция НайтиПоказателиПоИдентификаторам(Идентификаторы) Экспорт
	
	Результат = Новый Соответствие;
	
	Если ТипЗнч(Идентификаторы) = Тип("Строка") Тогда
		МассивИдентификаторов = СтрРазделить(Идентификаторы, ",");
	Иначе
		МассивИдентификаторов = Идентификаторы;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивИдентификаторов", МассивИдентификаторов);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПоказателиОбъектов.Код КАК Код,
		|	ПоказателиОбъектов.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.ПоказателиОбъектов КАК ПоказателиОбъектов
		|ГДЕ
		|	ПоказателиОбъектов.Код В (&МассивИдентификаторов)";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Код, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеПоказателяОбъекта(Объект, Показатель) Экспорт
	
	КоллекцияПоказателей = Новый Массив;
	КоллекцияПоказателей.Добавить(Показатель);
	
	Возврат ЗначенияПоказателейОбъекта(Объект, КоллекцияПоказателей)[Показатель];
	
КонецФункции

Функция ЗначенияПоказателейОбъекта(Объект, КоллекцияПоказателей) Экспорт
	
	КоллекцияОбъектов = Новый Массив;
	КоллекцияОбъектов.Добавить(Объект);
	
	Возврат ЗначенияПоказателейОбъектов(КоллекцияОбъектов, КоллекцияПоказателей)[Объект];
	
КонецФункции

Функция ЗначенияПоказателейОбъектов(КоллекцияОбъектов, КоллекцияПоказателей) Экспорт	

	Результат = Новый Соответствие();
	
	Для Каждого Объект Из КоллекцияОбъектов Цикл
		Результат.Вставить(Объект, Новый Соответствие);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КоллекцияОбъектов", КоллекцияОбъектов);
	Запрос.УстановитьПараметр("КоллекцияПоказателей", КоллекцияПоказателей);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗначенияПоказателейОбъектов.Объект КАК Объект,
		|	ЗначенияПоказателейОбъектов.Показатель КАК Показатель,
		|	ЗначенияПоказателейОбъектов.ЗначениеПоказателя КАК ЗначениеПоказателя
		|ИЗ
		|	РегистрСведений.ЗначенияПоказателейОбъектов КАК ЗначенияПоказателейОбъектов
		|ГДЕ
		|	ЗначенияПоказателейОбъектов.Объект В (&КоллекцияОбъектов)
		|	И ЗначенияПоказателейОбъектов.Показатель В (&КоллекцияПоказателей)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗначенияПериодическихПоказателейОбъектовСрезПоследних.Объект,
		|	ЗначенияПериодическихПоказателейОбъектовСрезПоследних.Показатель,
		|	ЗначенияПериодическихПоказателейОбъектовСрезПоследних.ЗначениеПоказателя
		|ИЗ
		|	РегистрСведений.ЗначенияПериодическихПоказателейОбъектов.СрезПоследних(, Объект В (&КоллекцияОбъектов)
		|	И Показатель В (&КоллекцияПоказателей)) КАК ЗначенияПериодическихПоказателейОбъектовСрезПоследних";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Результат[Выборка.Объект].Вставить(Выборка.Показатель, Выборка.ЗначениеПоказателя);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ВыполнитьОтложенныйРасчет() Экспорт
	
	СформироватьПорциюОтложенногоРассчета();
	
	ВыполнитьОтложенныйРасчетПорции();
	
	// Выключение регламентного задания, если очередь пуста
	НачатьТранзакцию();
	
	Попытка
		
		ЗаблокироватьОчередьОтложенногоРасчета();
		
		Если ОчередьОтложенногоРасчетаПуста() Тогда
			ВыключитьРегламетноеЗаданиеОтложенногоРасчета();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение ОписаниеОшибки();
		
	КонецПопытки;
	
КонецПроцедуры

Процедура РегламентныйРасчетПоказателя(Показатель) Экспорт
	
	РассчитатьПоказатель(Показатель, , Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОтложенныйРасчет

Процедура ВключитьРегламетноеЗаданиеОтложенногоРассчета()
	
	Отбор = Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.ОтложенныйРассчетПоказателей);	
	Если (РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор).Количество() > 0) Тогда
		Возврат;
	КонецЕсли;
	
	Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.ОтложенныйРассчетПоказателей);
	Задание.Наименование = НСтр("ru = 'Отложенный расчет показателей объектов.'");
	Задание.Записать();
	
КонецПроцедуры

Процедура ВыключитьРегламетноеЗаданиеОтложенногоРасчета()
	
	Отбор = Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.ОтложенныйРассчетПоказателей);	
	
	Для Каждого Задание ИЗ РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор) Цикл
		Задание.Удалить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаблокироватьОчередьОтложенногоРасчета(Показатель = Неопределено, КоллекцияОбъектов = Неопределено)
	
	Если (Показатель  = Неопределено) <> (КоллекцияОбъектов = Неопределено) Тогда
		ВызватьИсключение НСтр("ru = 'Недопустимо заполнение только одного параметра.'");
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных();
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьОтложенногоРасчетаПоказателейОбъектов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Если ЗначениеЗаполнено(Показатель) Тогда
	
		ЭлементБлокировки.ИсточникДанных = НовыйТаблицаОбъектов(Показатель, КоллекцияОбъектов);
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Показатель",	"Показатель");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Объект",		"Объект");
		
	КонецЕсли;
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

Процедура ЗаблокироватьПорциюОтложенногоРасчета()
	
	Блокировка = Новый БлокировкаДанных();
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПорцияОтложенногоРасчетаПоказателейОбъектов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

Процедура СформироватьПорциюОтложенногоРассчета()
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗаблокироватьОчередьОтложенногоРасчета();
		ЗаблокироватьПорциюОтложенногоРасчета();
	
		Если Не ПредыдующийОтложенныйРасчетВыполненУспешно() Тогда
			
			ОтменитьТранзакцию();
			
			ЗафиксироватьПредупреждениеОтложенногоРасчета(
				НСтр("ru = 'При попытке сформировать порцию для расчета обнаружена старая порция.
					 |Возможно предыдущий расчет завершился неудачно.
					 |Будет предпринята попытка обработать старую порцию.'"));
			
			Возврат;
			
		КонецЕсли;		
		
		РассчитатьИЗаписатьПорциюОтложенногоРасчета();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось сформировать порцию отложенного расчета.
				 |%1'"),
			ОписаниеОшибки());
			
		ЗафиксироватьОшибкуОтложенногоРасчета(ТекстОшибки);
		
		ВызватьИсключение ОписаниеОшибки();
		
	КонецПопытки;		
	
КонецПроцедуры

Процедура ДополнитьОчередьОтложенногоРасчета(Показатель, КоллекцияОбъектов)
	
	НаборЗаписей = РегистрыСведений.ОчередьОтложенногоРасчетаПоказателейОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Показатель.Установить(Показатель);
	
	ТаблицаОбъектов = НовыйТаблицаОбъектов(Показатель, КоллекцияОбъектов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОбъектов", ТаблицаОбъектов);
	Запрос.УстановитьПараметр("ДатаРегистрации", ТекущаяДатаСеанса());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаОбъектов.Показатель КАК Показатель,
		|	ТаблицаОбъектов.Объект КАК Объект
		|ПОМЕСТИТЬ ВТ_ТаблицаОбъектов
		|ИЗ
		|	&ТаблицаОбъектов КАК ТаблицаОбъектов
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаОбъектов.Показатель КАК Показатель,
		|	ВТ_ТаблицаОбъектов.Объект КАК Объект,
		|	&ДатаРегистрации КАК ДатаРегистрации
		|ИЗ
		|	ВТ_ТаблицаОбъектов КАК ВТ_ТаблицаОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьОтложенногоРасчетаПоказателейОбъектов КАК
		|			ОчередьОтложенногоРасчетаПоказателейОбъектов
		|		ПО ВТ_ТаблицаОбъектов.Показатель = ОчередьОтложенногоРасчетаПоказателейОбъектов.Показатель
		|		И ВТ_ТаблицаОбъектов.Объект = ОчередьОтложенногоРасчетаПоказателейОбъектов.Объект
		|ГДЕ
		|	ОчередьОтложенногоРасчетаПоказателейОбъектов.Показатель ЕСТЬ NULL";
		
	Выборка = Запрос.Выполнить().Выбрать();	
	Пока (Выборка.Следующий()) Цикл
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
	КонецЦикла;
	
	НаборЗаписей.Записать(Ложь);
	
КонецПроцедуры

Функция ОчередьОтложенногоРасчетаПуста()
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.ОчередьОтложенногоРасчетаПоказателейОбъектов КАК Очередь";
		
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ПредыдующийОтложенныйРасчетВыполненУспешно()
	
	Запрос = Новый Запрос();
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Порция.Показатель
		|ИЗ
		|	РегистрСведений.ПорцияОтложенногоРасчетаПоказателейОбъектов КАК Порция";
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура РассчитатьИЗаписатьПорциюОтложенногоРасчета()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОчередьОтложенногоРасчетаПоказателейОбъектов.Показатель КАК Показатель
		|ПОМЕСТИТЬ ВТ_Показатели
		|ИЗ
		|	РегистрСведений.ОчередьОтложенногоРасчетаПоказателейОбъектов КАК ОчередьОтложенногоРасчетаПоказателейОбъектов
		|УПОРЯДОЧИТЬ ПО
		|	ОчередьОтложенногоРасчетаПоказателейОбъектов.ДатаРегистрации
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОчередьОтложенногоРасчетаПоказателейОбъектов.Показатель КАК Показатель,
		|	ОчередьОтложенногоРасчетаПоказателейОбъектов.Объект КАК Объект
		|ИЗ
		|	ВТ_Показатели КАК ВТ_Показатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьОтложенногоРасчетаПоказателейОбъектов КАК
		|			ОчередьОтложенногоРасчетаПоказателейОбъектов
		|		ПО ВТ_Показатели.Показатель = ОчередьОтложенногоРасчетаПоказателейОбъектов.Показатель
		|ИТОГИ
		|ПО
		|	Показатель";
	
	ВыборкаПоказатель = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоказатель.Следующий() Цикл
		
		// Очистка РС ОчередьОтложенногоРасчетаПоказателейОбъектов
		НаборЗаписей = РегистрыСведений.ОчередьОтложенногоРасчетаПоказателейОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Показатель.Установить(ВыборкаПоказатель.Показатель);
		НаборЗаписей.Записать();
		
		// Заполнение РС ПорцияОтложенногоРасчетаПоказателейОбъектов
		НаборЗаписей = РегистрыСведений.ПорцияОтложенногоРасчетаПоказателейОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Показатель.Установить(ВыборкаПоказатель.Показатель);
		
		ВыборкаОбъект = ВыборкаПоказатель.Выбрать();
		Пока ВыборкаОбъект.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаОбъект);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьОтложенныйРасчетПорции()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПорцияОтложенногоРасчетаПоказателейОбъектов.Показатель КАК Показатель,
		|	ПорцияОтложенногоРасчетаПоказателейОбъектов.Объект
		|ИЗ
		|	РегистрСведений.ПорцияОтложенногоРасчетаПоказателейОбъектов КАК ПорцияОтложенногоРасчетаПоказателейОбъектов
		|ИТОГИ
		|ПО
		|	Показатель";
		
	ВыборкаПоказатель = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоказатель.Следующий() Цикл
		
		Показатель = ВыборкаПоказатель.Показатель;
		
		КоллекцияОбъектов = Новый Массив();
		
		ВыборкаОбъект = ВыборкаПоказатель.Выбрать();
		Пока ВыборкаОбъект.Следующий() Цикл
			КоллекцияОбъектов.Добавить(ВыборкаОбъект.Объект);
		КонецЦикла;
		
		РассчитатьПоказатель(Показатель, КоллекцияОбъектов);
			
		// Удаление показателя из порции
		НаборЗаписей = РегистрыСведений.ПорцияОтложенногоРасчетаПоказателейОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Показатель.Установить(Показатель);
		НаборЗаписей.Записать();			
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗафиксироватьПредупреждениеОтложенногоРасчета(ТекстПредупреждения)
	
	ЗаписьЖурналаРегистрации(
			"ОтложенныйРасчетПоказателейОбъектов",
			УровеньЖурналаРегистрации.Предупреждение, , ,
			ТекстПредупреждения);
	
КонецПроцедуры

Процедура ЗафиксироватьОшибкуОтложенногоРасчета(ТекстОшибки)
	
	ЗаписьЖурналаРегистрации(
			"ОтложенныйРасчетПоказателейОбъектов",
			УровеньЖурналаРегистрации.Ошибка, , ,
			ТекстОшибки);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетПоказателей

Процедура РассчитатьПоказательВыполнивКод(ПоказательСтруктура, КоллекцияОбъектов = Неопределено, Знач ЭтоРегламентноеЗадание = Ложь)
	
	// Если это регламентное задание, то коллекция объектов не передается
	Если КоллекцияОбъектов = Неопределено Тогда
		КоллекцияОбъектов = Новый Массив();
	КонецЕсли;
	
	//@skip-warning
	Параметры = ПоказательСтруктура.Параметры;
	//@skip-warning
	МассивОбъектов = КоллекцияОбъектов;
	
	Результат = Новый Соответствие();
	
	УстановитьБезопасныйРежим(Истина);
	
	Выполнить (ПоказательСтруктура.ВыполняемыйКод);
	
	УстановитьБезопасныйРежим(Ложь);
	
	Для Каждого Объект Из КоллекцияОбъектов Цикл
		
		ЗначениеПоказателя = Результат[Объект];
		ЗаписатьЗначениеПоказателя(Объект, ПоказательСтруктура, ЗначениеПоказателя);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьПоказательВыполнивЗапрос(ПоказательСтруктура, КоллекцияОбъектов = Неопределено, Знач ЭтоРегламентноеЗадание = Ложь)
	
	// Если это регламентное задание, то коллекция объектов не передается
	Если КоллекцияОбъектов = Неопределено Тогда
		КоллекцияОбъектов = Новый Массив();
	КонецЕсли;
	
	ТаблицаОбъектов = Новый ТаблицаЗначений();
	ТаблицаОбъектов.Колонки.Добавить("Объект", ПоказательСтруктура.ОписаниеТиповВладелец);
	
	Для Каждого ТекущийОбъект Из КоллекцияОбъектов Цикл
		
		НоваяСтрока = ТаблицаОбъектов.Добавить();
		НоваяСтрока.Объект = ТекущийОбъект;
		
	КонецЦикла;
		
	Подзапросы = Новый Массив();
	
	Подзапросы.Добавить(
		"ВЫБРАТЬ
		|	КоллекцияОбъектов.Объект
		|ПОМЕСТИТЬ ВТ_Объекты
		|ИЗ
		|	&КоллекцияОбъектов КАК КоллекцияОбъектов");
		
	Подзапросы.Добавить(ПоказательСтруктура.ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(Подзапросы, РазделительПакетаЗапросов());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("КоллекцияОбъектов",		ТаблицаОбъектов);
	Запрос.УстановитьПараметр("ЭтоРегламентноеЗадание",	ЭтоРегламентноеЗадание);
	
	Для Каждого ПараметрЗапроса Из ПоказательСтруктура.ПараметрыЗапроса Цикл
		
		Запрос.УстановитьПараметр(ПараметрЗапроса.ИмяПараметра, ПараметрЗапроса.ЗначениеПараметра);
		
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаписатьЗначениеПоказателя(Выборка.Объект, ПоказательСтруктура, Выборка.ЗначениеПоказателя);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйПоказательСтруктура(Показатель)
	
	Результат = Новый Структура("Ссылка, СпособРасчета, Периодический, ОписаниеТиповВладелец");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Показатель", Показатель);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПоказателиОбъектов.Ссылка КАК Ссылка,
		|	ПоказателиОбъектов.СпособРасчета КАК СпособРасчета,
		|	ВЫБОР
		|		КОГДА ПоказателиОбъектов.Периодичность <> ЗНАЧЕНИЕ(Перечисление.ПериодичностьПоказателяОбъекта.Непериодический)
		|		И ПоказателиОбъектов.Периодичность <> ЗНАЧЕНИЕ(Перечисление.ПериодичностьПоказателяОбъекта.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Периодический,
		|	ПоказателиОбъектов.Периодичность КАК Периодичность
		|ИЗ
		|	ПланВидовХарактеристик.ПоказателиОбъектов КАК ПоказателиОбъектов
		|ГДЕ
		|	ПоказателиОбъектов.Ссылка = &Показатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоказателиОбъектовВладельцы.Владелец КАК Владелец,
		|	ПоказателиОбъектовВладельцы.Владелец.ПолноеИмя КАК ВладелецПолноеИмя
		|ИЗ
		|	ПланВидовХарактеристик.ПоказателиОбъектов.Владельцы КАК ПоказателиОбъектовВладельцы
		|ГДЕ
		|	ПоказателиОбъектовВладельцы.Ссылка = &Показатель";
		
	РезультатыЗапроса = Запрос.ВыполнитьПакет();	
			
	Выборка = РезультатыЗапроса[0].Выбрать();
	Выборка.Следующий();
	
	ВыборкаВладельцы = РезультатыЗапроса[1].Выбрать();
	
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	Если (Выборка.Периодический) Тогда
		Результат.Вставить("Периодичность", Выборка.Периодичность);
	КонецЕсли;
	
	ТипыВладельца = Новый Массив;
	Пока ВыборкаВладельцы.Следующий() Цикл
		
		ТекущийТип = ВыборкаВладельцы.ВладелецПолноеИмя;
		ТекущийТип = СтрЗаменить(ТекущийТип, "Справочник.",	"СправочникСсылка.");
		ТекущийТип = СтрЗаменить(ТекущийТип, "Документ.",	"ДокумнетСсылка.");
		
		ТипыВладельца.Добавить(Тип(ТекущийТип));
		
	КонецЦикла;
	
	ОписаниеТиповВладелец = Новый ОписаниеТипов(ТипыВладельца);
	Результат.Вставить("ОписаниеТиповВладелец", ОписаниеТиповВладелец);
	
	ДополнитьСтруктуруПоказателяПоСпособуРасчетаВыполнитьКод(Результат);
	ДополнитьСтруктуруПоказателяПоСпособуРасчетаЗапрос		(Результат);
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьСтруктуруПоказателяПоСпособуРасчетаВыполнитьКод(ПоказательСтруктура)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Показатель", ПоказательСтруктура.Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПоказателиОбъектов.ВыполняемыйКод КАК ВыполняемыйКод,
		|	ПоказателиОбъектов.Параметры.(
		|		ИмяПараметра КАК ИмяПараметра,
		|		ЗначениеПараметра КАК ЗначениеПараметра) КАК Параметры
		|ИЗ
		|	ПланВидовХарактеристик.ПоказателиОбъектов КАК ПоказателиОбъектов
		|ГДЕ
		|	ПоказателиОбъектов.Ссылка = &Показатель
		|	И ПоказателиОбъектов.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаПоказателейОбъектов.ВыполнитьКод)";
		
	ВыборкаШапка = Запрос.Выполнить().Выбрать();
	Если Не ВыборкаШапка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ПоказательСтруктура.Вставить("ВыполняемыйКод", 	ВыборкаШапка.ВыполняемыйКод);
	ПоказательСтруктура.Вставить("Параметры",		Новый Массив());
	
	ВыборкаПараметры = ВыборкаШапка.Параметры.Выбрать();
	Пока ВыборкаПараметры.Следующий() Цикл
		
		СтруктураПараметр = Новый Структура("ИмяПараметра, ЗначениеПараметра");
		ЗаполнитьЗначенияСвойств(СтруктураПараметр, ВыборкаПараметры);
		
		ПоказательСтруктура.Параметры.Добавить(СтруктураПараметр);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьСтруктуруПоказателяПоСпособуРасчетаЗапрос(ПоказательСтруктура)
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Показатель", ПоказательСтруктура.Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПоказателиОбъектов.ТекстЗапроса КАК ТекстЗапроса,
		|	ПоказателиОбъектов.Параметры.(
		|		ИмяПараметра КАК ИмяПараметра,
		|		ЗначениеПараметра КАК ЗначениеПараметра) КАК Параметры
		|ИЗ
		|	ПланВидовХарактеристик.ПоказателиОбъектов КАК ПоказателиОбъектов
		|ГДЕ
		|	ПоказателиОбъектов.Ссылка = &Показатель
		|	И ПоказателиОбъектов.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаПоказателейОбъектов.Запрос)";
		
	ВыборкаШапка = Запрос.Выполнить().Выбрать();
	Если Не ВыборкаШапка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ПоказательСтруктура.Вставить("ТекстЗапроса", 		ВыборкаШапка.ТекстЗапроса);
	ПоказательСтруктура.Вставить("ПараметрыЗапроса",	Новый Массив());
	
	ВыборкаПараметры = ВыборкаШапка.Параметры.Выбрать();
	Пока ВыборкаПараметры.Следующий() Цикл
		
		СтруктураПараметр = Новый Структура("ИмяПараметра, ЗначениеПараметра");
		ЗаполнитьЗначенияСвойств(СтруктураПараметр, ВыборкаПараметры);
		
		ПоказательСтруктура.ПараметрыЗапроса.Добавить(СтруктураПараметр);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьЗначениеПоказателя(Объект, ПоказательСтруктура, ЗначениеПоказателя)
	
	Если (ПоказательСтруктура.Периодический) Тогда
		
		Период = ТекущаяДатаСеанса();
		
		Если (ПоказательСтруктура.Периодичность = Перечисления.ПериодичностьПоказателяОбъекта.Год) Тогда
			
			Период = НачалоГода(Период);
			
		ИначеЕсли (ПоказательСтруктура.Периодичность = Перечисления.ПериодичностьПоказателяОбъекта.Квартал) Тогда
			 
			 Период = НачалоКвартала(Период);
			 
		ИначеЕсли (ПоказательСтруктура.Периодичность = Перечисления.ПериодичностьПоказателяОбъекта.Месяц) Тогда
			 
			 Период = НачалоМесяца(Период);
			 
		ИначеЕсли (ПоказательСтруктура.Периодичность = Перечисления.ПериодичностьПоказателяОбъекта.День) Тогда
			 
			 Период = НачалоДня(Период);
			
		КонецЕсли;
		
	КонецЕсли;
	
	МенеджерРегистра = ?(ПоказательСтруктура.Периодический,
		РегистрыСведений.ЗначенияПериодическихПоказателейОбъектов,
		РегистрыСведений.ЗначенияПоказателейОбъектов);
		
	НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Объект.Установить(Объект);
	НаборЗаписей.Отбор.Показатель.Установить(ПоказательСтруктура.Ссылка);
	Если (ПоказательСтруктура.Периодический) Тогда
		//@skip-warning
		НаборЗаписей.Отбор.Период.Установить(Период);
	КонецЕсли;
	
	Запись = НаборЗаписей.Добавить();
	Если (ПоказательСтруктура.Периодический) Тогда
		Запись.Период = Период;
	КонецЕсли;
	Запись.Объект = Объект;
	Запись.Показатель = ПоказательСтруктура.Ссылка;
	Запись.ЗначениеПоказателя = ЗначениеПоказателя;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция РазделительПакетаЗапросов()
	
	Возврат
		"
		|
		|;
		|
		|";
	
КонецФункции

Функция НовыйТаблицаОбъектов(Показатель, КоллекцияОбъектов)
	
	Результат = Новый ТаблицаЗначений;
	
	МетаданныеОчереди = Метаданные.РегистрыСведений.ОчередьОтложенногоРасчетаПоказателейОбъектов;
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("Показатель",	МетаданныеОчереди.Измерения.Показатель.Тип);
	Результат.Колонки.Добавить("Объект",		МетаданныеОчереди.Измерения.Объект.Тип);

	Для Каждого ТекущийОбъект Из КоллекцияОбъектов Цикл
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Показатель	= Показатель;
		НоваяСтрока.Объект		= ТекущийОбъект;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти