#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПредыдущееНаименование = ТекущийОбъект.Наименование;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПрочитатьРасписание(Объект); // Осознанно именно в этом обработчике события
	
	ПрочитатьВладельца();
	
	ОбновитьПараметрыЗапроса();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	НеПроверяемыеРеквизиты = Новый Массив;
	
	Если ИспользоватьНесколькоВладельцев Тогда
		НеПроверяемыеРеквизиты.Добавить("Владелец");
	КонецЕсли;
	
	Для Каждого ИмяРеквизита Из НеПроверяемыеРеквизиты Цикл
		Индекс = ПроверяемыеРеквизиты.Найти(ИмяРеквизита);
		Если (Индекс <> Неопределено) Тогда
			ПроверяемыеРеквизиты.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не ИспользоватьНесколькоВладельцев Тогда
		УстановитьВладельцаИзШапки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Расписание", Расписание);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПрочитатьРасписание(ТекущийОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если ПустаяСтрока(Объект.Код) Или (Объект.Код = СформироватьИдентификатор(ПредыдущееНаименование)) Тогда
		
		Объект.Код = СформироватьИдентификатор(Объект.Наименование);
		
	КонецЕсли;
	
	ПредыдущееНаименование = Объект.Наименование; 
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстЗапросаПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ТекстЗапросаПриИзменении_Продолжение", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстЗапросаПриИзменении_Продолжение() Экспорт
	
	ОбновитьПараметрыЗапроса(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапускатьРасчетПоРегламетномуЗаданиюПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("РасписаниеСтрокойНажатие_Продолжение", ЭтаФорма);
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеСтрокойНажатие_Продолжение(НовоеРасписание, ДополнительныеПараметры) Экспорт
	
	Если НовоеРасписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Расписание = НовоеРасписание;
	РасписаниеСтрокой = Строка(Расписание);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапускатьРасчетПоТриггерамПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьИдентификаторКоманда(Команда)
	
	Объект.Код = СформироватьИдентификатор(Объект.Наименование);
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторЗапроса(Команда)
	
	Если (ПустаяСтрока(Объект.ТекстЗапроса)) Тогда
		Конструктор = Новый КонструкторЗапроса();
	Иначе
		Конструктор = Новый КонструкторЗапроса(СокрЛП(Объект.ТекстЗапроса));
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("КонструкторЗапроса_Продолжение", ЭтаФорма);
	Конструктор.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторЗапроса_Продолжение(ТекстЗапроса, ДополнительныеПараметры) Экспорт
	
	Если (ТекстЗапроса = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ТекстЗапроса = ТекстЗапроса;
	
	ОбновитьПараметрыЗапроса(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыЗапросаКоманда(Команда)
	
	ОбновитьПараметрыЗапроса(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНесколькоВладельцевКоманда(Команда)
	
	ИспользоватьНесколькоВладельцев = Истина;
	
	УстановитьВладельцаИзШапки();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект		= Форма.Объект;
	Элементы	= Форма.Элементы;
	
	// Расписание
	Элементы.РасписаниеСтрокой.Видимость = Объект.ЗапускатьРасчетПоРегламетномуЗаданию;
	
	// Владельцы
	Элементы.Владелец.Видимость							= Не Форма.ИспользоватьНесколькоВладельцев;
	Элементы.ИспользоватьНесколькоВладельцев.Видимость	= Не Форма.ИспользоватьНесколькоВладельцев;
	Элементы.СтраницаВладельцы.Видимость				= Форма.ИспользоватьНесколькоВладельцев;
	
	// СтраницаРасчетПоказателейСтраницы
	Элементы.РасчетПоказателейСтраницы.Видимость = ЗначениеЗаполнено(Объект.СпособРасчета);
	
	Если Объект.СпособРасчета = СпособРасчетаВыполнитьКод() Тогда
		
		Элементы.РасчетПоказателейСтраницы.ТекущаяСтраница = Элементы.СтраницаВыполнитьКод;
		
	ИначеЕсли Объект.СпособРасчета = СпособРасчетаЗапрос() Тогда
		 
		Элементы.РасчетПоказателейСтраницы.ТекущаяСтраница = Элементы.СтраницаЗапрос;
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Неожиданный способ расчета.'");
		
	КонецЕсли;
	
	// СтраницаЗапускРасчета
	Элементы.Триггеры.Видимость = Объект.ЗапускатьРасчетПоТриггерам;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьВладельца()
	
	ИспользоватьНесколькоВладельцев = Объект.Владельцы.Количество() > 1;
	
	Если Объект.Владельцы.Количество() = 1 Тогда
		Владелец = Объект.Владельцы[0].Владелец;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьИдентификатор(Наименование)
	
	Слова = СтрРазделить(Наименование, " ", Ложь);
	ПодготовленныеСлова = Новый Массив;
	
	Для Каждого Слово Из Слова Цикл
		ПодготовленныеСлова.Добавить(ВРег(Лев(Слово, 1)) + Сред(Слово, 2));
	КонецЦикла;
	
	Возврат СтрСоединить(ПодготовленныеСлова);
	
КонецФункции

&НаСервере
Процедура ОбновитьПараметрыЗапроса(ТолькоПросмотр = Истина)
	
	ПараметрыЗапроса = ПолучитьПараметрыЗапроса(Объект.ТекстЗапроса);
	
	Если (Не ТолькоПросмотр) Тогда
	
		// Создаем новые параметры	
		Для Каждого КлючИЗначение Из ПараметрыЗапроса Цикл
			
			ИмяПараметра = КлючИЗначение.Ключ;
			
			Если ИмяПараметра = "ЭтоРегламентноеЗадание" Тогда
				Продолжить;
			КонецЕсли;
			
			ОтборСтрок = Новый Структура("ИмяПараметра", ИмяПараметра);
			
			Если (Объект.Параметры.НайтиСтроки(ОтборСтрок).Количество() = 0) Тогда

				НоваяСтрока = Объект.Параметры.Добавить();
				НоваяСтрока.ИмяПараметра = ИмяПараметра;
					
			КонецЕсли;
			
		КонецЦикла;
		
		// Удаляем неиспользуемые параметры
		Индекс = Объект.Параметры.Количество() - 1;
		Пока Индекс >= 0 Цикл
			
			СтрокаТЧ = Объект.Параметры[Индекс];
			Если (Не ЗначениеЗаполнено(СтрокаТЧ.ЗначениеПараметра))
				И (Не ПараметрыЗапроса.Свойство(СтрокаТЧ.ИмяПараметра)) Тогда
					
				Объект.Параметры.Удалить(Индекс);
				
			КонецЕсли;			
			
			Индекс = Индекс - 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Заполнение служебных реквизитов
	Для Каждого СтрокаТЧ Из Объект.Параметры Цикл
		
		ПараметрЕстьВЗапросе = ПараметрыЗапроса.Свойство(СтрокаТЧ.ИмяПараметра);
		
		СтрокаТЧ.НеИспользуется = Не ПараметрЕстьВЗапросе;
		
		Если (ПараметрЕстьВЗапросе) Тогда
			СтрокаТЧ.ТипЗначения = ПараметрыЗапроса[СтрокаТЧ.ИмяПараметра].ТипЗначения;
		Иначе
			СтрокаТЧ.ТипЗначения = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыЗапроса(ТекстЗапроса)
	
	Результат = Новый Структура();
	
	Если (Не ЗначениеЗаполнено(ТекстЗапроса)) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		СхемаЗапроса = Новый СхемаЗапроса();
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	Исключение
		Возврат Результат;
	КонецПопытки;
	
	ПараметрыЗапроса = СхемаЗапроса.НайтиПараметры();	
	Для Каждого ОписаниеПараметра Из ПараметрыЗапроса Цикл
		Результат.Вставить(ОписаниеПараметра.Имя, Новый Структура("ТипЗначения", ОписаниеПараметра.ТипЗначения));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПрочитатьРасписание(ТекущийОбъект)
	
	Если ЗначениеЗаполнено(ТекущийОбъект.ИдентификаторРегламентногоЗадания) Тогда
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(
			ТекущийОбъект.ИдентификаторРегламентногоЗадания);
	КонецЕсли;
	
	Если РегламентноеЗадание <> Неопределено Тогда
		Расписание = РегламентноеЗадание.Расписание;
	Иначе
		Расписание = Новый РасписаниеРегламентногоЗадания();
	КонецЕсли;
	
	РасписаниеСтрокой = Строка(Расписание);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВладельцаИзШапки()
		
	Объект.Владельцы.Очистить();
		
	НоваяСтрока = Объект.Владельцы.Добавить();
	НоваяСтрока.Владелец = Владелец;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СпособРасчетаВыполнитьКод()
	Возврат ПредопределенноеЗначение("Перечисление.СпособыРасчетаПоказателейОбъектов.ВыполнитьКод");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СпособРасчетаЗапрос()
	Возврат ПредопределенноеЗначение("Перечисление.СпособыРасчетаПоказателейОбъектов.Запрос");
КонецФункции

#КонецОбласти