#Область ОбраработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьКорректностьИдентификатора(Отказ);
	
	НеПроверяемыеРеквизиты = Новый Массив;
	
	Если (СпособРасчета <> Перечисления.СпособыРасчетаПоказателейОбъектов.ВыполнитьКод) Тогда
		НеПроверяемыеРеквизиты.Добавить("ВыполняемыйКод");		
	КонецЕсли;
	
	Если (СпособРасчета <> Перечисления.СпособыРасчетаПоказателейОбъектов.Запрос) Тогда
		НеПроверяемыеРеквизиты.Добавить("ТекстЗапроса");
	КонецЕсли;
	
	Для Каждого ИмяРеквизита Из НеПроверяемыеРеквизиты Цикл
		Индекс = ПроверяемыеРеквизиты.Найти(ИмяРеквизита);
		Если (Индекс <> Неопределено) Тогда
			ПроверяемыеРеквизиты.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	РегламентноеЗадание_ПередУдалением();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗапускатьРасчетПоРегламетномуЗаданию = Ложь;
	ИдентификаторРегламентногоЗадания = Неопределено;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если (ОбменДанными.Загрузка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		НоваяСсылка = ПланыВидовХарактеристик.ПоказателиОбъектов.ПолучитьСсылку(Новый УникальныйИдентификатор());
		УстановитьСсылкуНового(НоваяСсылка);
	КонецЕсли;
	
	Владельцы_ПередЗаписью();
	
	РегламентноеЗадание_ПередЗаписью();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если (ОбменДанными.Загрузка) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РегламентноеЗадание

Процедура РегламентноеЗадание_ПередЗаписью()
		
	// Регламентное задание
	Если ЗапускатьРасчетПоРегламетномуЗаданию
		И Не ЗначениеЗаполнено(ИдентификаторРегламентногоЗадания) Тогда
		
		Задание = СоздатьРегламентноеЗадание();
		ИдентификаторРегламентногоЗадания = Задание.УникальныйИдентификатор;
		
	ИначеЕсли Не ЗапускатьРасчетПоРегламетномуЗаданию И ЗначениеЗаполнено(ИдентификаторРегламентногоЗадания) Тогда
		 
		 УдалитьРегламентноеЗадание();
		 ИдентификаторРегламентногоЗадания = Неопределено;
			
	КонецЕсли;
	
	Расписание = Неопределено;
	Если ЗапускатьРасчетПоРегламетномуЗаданию И ДополнительныеСвойства.Свойство("Расписание", Расписание) Тогда
		УстановитьРасписаниеРегламентногоЗадания(Расписание);
	КонецЕсли;
	
КонецПроцедуры

Процедура РегламентноеЗадание_ПередУдалением()
	
	Если ЗначениеЗаполнено(ИдентификаторРегламентногоЗадания) Тогда
		УдалитьРегламентноеЗадание();
	КонецЕсли;
	
КонецПроцедуры

// Создает регламентное задание
// 
// Параметры:
// 	Показатель - ПланВидовХарактеристикСсылка.ПоказателиОбъектов - Показатель
// Возвращаемое значение: РегламентноеЗадание - Регламентное задание.
// 	
Функция СоздатьРегламентноеЗадание()
	
	СсылкаНаПоказатель = ?(ЭтоНовый(), ПолучитьСсылкуНового(), Ссылка);
	
	НовоеЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание(
			Метаданные.РегламентныеЗадания.РегламентныйРасчетПоказателя);
			
	НовоеЗадание.Наименование = СтрШаблон(НСтр("ru = 'Расчет показателя ""%1"".'"), Наименование);
	НовоеЗадание.Параметры.Добавить(СсылкаНаПоказатель);
	НовоеЗадание.Ключ = Строка(СсылкаНаПоказатель.УникальныйИдентификатор());
	НовоеЗадание.Использование = Истина;
	НовоеЗадание.Записать();
	
	Возврат НовоеЗадание;
	
КонецФункции

Процедура УстановитьРасписаниеРегламентногоЗадания(Расписание)
	
	Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторРегламентногоЗадания);
	Если Задание <> Неопределено Тогда
		Задание.Расписание = Расписание;
		Задание.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьРегламентноеЗадание()
	
	Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторРегламентногоЗадания);
	Если Задание <> Неопределено Тогда
		Задание.Удалить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Владельцы

Процедура Владельцы_ПередЗаписью()
	
	// #РеквизитыОбъектов
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владельцы", Владельцы.ВыгрузитьКолонку("Владелец"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбъектыМетаданныхПО.Ссылка КАК Ссылка,
		|	ОбъектыМетаданныхПО.ПолноеИмя КАК ПолноеИмя
		|ИЗ
		|	Справочник.ОбъектыМетаданныхПО КАК ОбъектыМетаданныхПО
		|ГДЕ
		|	ОбъектыМетаданныхПО.Ссылка В (&Владельцы)";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Для Каждого СтрокаВладельца Из Владельцы Цикл
		
		Выборка.Сбросить();
		Если (Выборка.НайтиСледующий(Новый Структура("Ссылка", СтрокаВладельца.Владелец))) Тогда
			СтрокаВладельца.ВладелецПолноеИмя = Выборка.ПолноеИмя;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Процедура ПроверитьКорректностьИдентификатора(Отказ)
	
	Попытка
		//@skip-warning
		Структура = Новый Структура(Код);
	Исключение
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Некорректный идентификатор показателя'");
		Сообщение.Поле = "Код";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти